
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor

def _brand_header(slide, brand_primary="#C00000", logo_path=None):
    shp = slide.shapes.add_shape(1, Inches(0), Inches(0), Inches(10), Inches(0.8))  # rectangle
    fill = shp.fill; fill.solid()
    # hex to rgb
    brand_primary = brand_primary.lstrip("#")
    rgb = RGBColor(int(brand_primary[0:2],16), int(brand_primary[2:4],16), int(brand_primary[4:6],16))
    fill.fore_color.rgb = rgb
    shp.line.fill.background()
    tx = slide.shapes.add_textbox(Inches(0.3), Inches(0.05), Inches(9), Inches(0.6))
    tf = tx.text_frame
    tf.text = "Kafaa Operational Excellence Assessment"
    tf.paragraphs[0].font.size = Pt(18); tf.paragraphs[0].font.bold = True
    tf.paragraphs[0].font.color.rgb = RGBColor(255,255,255)
    if logo_path:
        try:
            slide.shapes.add_picture(logo_path, Inches(9), Inches(0.05), height=Inches(0.6))
        except Exception:
            pass

def add_pace_slide(prs, pace: dict, brand_primary="#C00000", logo_path=None):
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    _brand_header(slide, brand_primary, logo_path)
    title = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.6))
    title.text_frame.text = "Kafaa PACE — Priority Summary"
    title.text_frame.paragraphs[0].font.size = Pt(26)

    y = Inches(1.0)
    tw = pace.get("top_wastes", [])[:6]
    box = slide.shapes.add_textbox(Inches(0.5), y, Inches(9), Inches(0.6))
    tf = box.text_frame; tf.text = "Top themes"
    tf.paragraphs[0].font.size = Pt(18); tf.paragraphs[0].font.bold = True
    y += Inches(0.6)
    for w,_ in tw:
        tb = slide.shapes.add_textbox(Inches(0.6), y, Inches(8.8), Inches(0.4))
        tb.text_frame.text = f"• {w.title()}"
        tb.text_frame.paragraphs[0].font.size = Pt(14)
        y += Inches(0.45)

    badge = pace.get("badge", {})
    y = Inches(4.2)
    box2 = slide.shapes.add_textbox(Inches(0.5), y, Inches(9), Inches(0.8))
    btxt = f"Kafaa Readiness Badge progress: {badge.get('tracked',0)}/{badge.get('required',4)} KPIs tracked"
    box2.text_frame.text = btxt
    box2.text_frame.paragraphs[0].font.size = Pt(14)
    return slide

def add_action_plan_slide(prs, actions_df, brand_primary="#C00000", logo_path=None):
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    _brand_header(slide, brand_primary, logo_path)
    title = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.6))
    title.text_frame.text = "Countermeasures — Action Plan (Top)"
    title.text_frame.paragraphs[0].font.size = Pt(26)

    y = Inches(1.0)
    box = slide.shapes.add_textbox(Inches(0.5), y, Inches(9), Inches(0.5))
    tf = box.text_frame; tf.text = "Priority  |  Stage  |  Waste  |  Action  |  Estimated Benefit  |  Effort  |  KPI"
    tf.paragraphs[0].font.size = Pt(12); tf.paragraphs[0].font.bold = True
    y += Inches(0.5)

    rows = actions_df.head(8).to_dict("records")
    for r in rows:
        line = f"{r.get('priority','')}  |  {r.get('stage','')}  |  {str(r.get('waste','')).title()}  |  {r.get('action','')}  |  {r.get('est_annual_benefit_fmt','')}  |  {r.get('effort','')}  |  {r.get('kpi','')}"
        tb = slide.shapes.add_textbox(Inches(0.5), y, Inches(9.2), Inches(0.4))
        tb.text_frame.text = "• " + line
        tb.text_frame.paragraphs[0].font.size = Pt(12)
        y += Inches(0.42)
        if y > Inches(6.5):
            break
    return slide

def export_pptx(out_path, pace=None, actions_df=None, brand_primary="#C00000", logo_path=None):
    prs = Presentation()
    # title slide
    s = prs.slides.add_slide(prs.slide_layouts[0])
    s.shapes.title.text = "OE Assessment — Kafaa Report"
    s.placeholders[1].text = "Generated by OE Assessment Report Generator"
    # PACE
    if pace:
        try:
            add_pace_slide(prs, pace, brand_primary=brand_primary, logo_path=logo_path)
        except Exception:
            pass
    # Actions
    if actions_df is not None and len(actions_df) > 0:
        try:
            add_action_plan_slide(prs, actions_df, brand_primary=brand_primary, logo_path=logo_path)
        except Exception:
            pass
    prs.save(out_path)
